@{
    ViewData["Title"] = "Flocking Simulation";
    Layout = "~/Views/Shared/_WebToolsLayout.cshtml";
}

<style>
    canvas {
        display: block;
        margin-top: 15px;
        margin-bottom: 15px;
    }
    input
    {
        width:90% !important;
    }
</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/p5.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/addons/p5.dom.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.7.2/addons/p5.sound.min.js"></script>

<div id="p5holder">

</div>

<table style="width:640px">
    <tr>
        <th id="align">Align</th>
        <th id="maxforce">Max Force</th>
    </tr>
    <tr>
        <th id="cohesion">Cohesion</th>
        <th id="maxspeed">Max Speed</th>
    </tr>
    <tr>
        <th id="separation">Separation</th>
        <th id="perceptionradius">Perception Radius</th>
    </tr>
</table>

<script>
    // Flocking
    // Originally developed by Daniel Shiffman - https://thecodingtrain.com/CodingChallenges/124-flocking-boids.html
    // Modified and optimized by Ryan Darras

    const flock = [];

    let alignSlider, cohesionSlider, separationSlider, maxForceSlider, maxSpeedSlider, perceptionRadiusSlider;

    function setup() {
        var canvas = createCanvas(640, 360);
        canvas.parent("p5holder");
        alignSlider = createSlider(0, 2, 1, 0.1);
        alignSlider.parent("align");
        cohesionSlider = createSlider(0, 2, 1, 0.1);
        cohesionSlider.parent("cohesion");
        separationSlider = createSlider(0, 2, 1, 0.1);
        separationSlider.parent("separation");

        maxForceSlider = createSlider(0, 1, 0.2, 0.1);
        maxForceSlider.parent("maxforce");
        maxSpeedSlider = createSlider(1, 10, 5, 0.1);
        maxSpeedSlider.parent("maxspeed");
        perceptionRadiusSlider = createSlider(0, 200, 25, 1);
        perceptionRadiusSlider.parent("perceptionradius");

        for (let i = 0; i < 200; i++) {
            flock.push(new Boid());
        }

    }

    function draw() {
        background(0);
        for (let boid of flock) {
            boid.edges();
            boid.flock(flock);
            boid.update();
            boid.show();
        }
    }
</script>

<script>
    // Flocking
    // Originally developed by Daniel Shiffman - https://thecodingtrain.com/CodingChallenges/124-flocking-boids.html
    // Modified and optimized by Ryan Darras

    class Boid {
        constructor(state) {
            this.position = createVector(random(width), random(height));
            this.velocity = p5.Vector.random2D();
            this.velocity.setMag(random(2, 4));
            this.acceleration = createVector();
            this.maxForce = 0.2;
            this.maxSpeed = 5;
            this.boidsToConsider = [];
            this.perceptionRadius = 25;
            this.tempPosition = createVector();
            this.tempDistance = 0;
        }

        edges() {
            if (this.position.x > width) {
                this.position.x = 0;
            } else if (this.position.x < 0) {
                this.position.x = width;
            }
            if (this.position.y > height) {
                this.position.y = 0;
            } else if (this.position.y < 0) {
                this.position.y = height;
            }
        }

        findboidsToConsider(flock) {
            this.boidsToConsider = []
            for (let other of flock) {
                if (other != this) {
                    let d = this.distance(other);
                    other.tempDistance = d;
                    if (d < this.perceptionRadius) {
                        this.boidsToConsider.push(other);
                    }
                }

            }
        }

        distance(other) {
            let tempx = other.position.x;
            let tempy = other.position.y;
            if (Math.abs(this.position.x - other.position.x) >= width - perceptionRadiusSlider.value()) {
                //Need to consider X direction
                tempx = this.convertX(other);
                other.tempPosition.x = tempx;
            }
            if (Math.abs(this.position.y - other.position.y) >= height - perceptionRadiusSlider.value()) {
                //Need to consider Y direction
                tempy = this.convertY(other);
                other.tempPosition.y = tempy;
            }

            return dist(this.position.x, this.position.y, tempx, tempy);
        }

        convertX(other) {
            if (other.position.x >= width - perceptionRadiusSlider.value()) {
                return 0 - width + other.position.x;
            }
            else {
                return width + other.position.x;
            }
        }

        convertY(other) {
            if (other.position.y >= height - perceptionRadiusSlider.value()) {
                return 0 - height + other.position.y;
            }
            else {
                return height + other.position.y;
            }
        }

        //Good
        align(flock) {
            let steering = createVector();
            let total = 0;
            for (let other of flock) {
                steering.add(other.velocity);
                total++;
            }
            if (total > 0) {
                steering.div(total);
                steering.setMag(this.maxSpeed);
                steering.sub(this.velocity);
                steering.limit(this.maxForce);
            }
            return steering;
        }

        //good
        separation(flock) {
            let steering = createVector();
            let total = 0;
            for (let other of flock) {
                let d = other.tempDistance;
                let diff = p5.Vector.sub(this.position, other.tempPosition);
                diff.div(d * d);
                steering.add(diff);
                total++;
            }
            if (total > 0) {
                steering.div(total);
                steering.setMag(this.maxSpeed);
                steering.sub(this.velocity);
                steering.limit(this.maxForce);
            }
            return steering;
        }

        cohesion(flock) {
            let steering = createVector();
            let total = 0;
            for (let other of flock) {
                steering.add(other.tempPosition);
                total++;
            }
            if (total > 0) {
                steering.div(total);
                steering.sub(this.position);
                steering.setMag(this.maxSpeed);
                steering.sub(this.velocity);
                steering.limit(this.maxForce);
            }
            return steering;
        }

        flock(flock) {
            //handles the blow code directly instead of creating temp array and returning
            //let boidsToConsider = this.findboidsToConsider(states)
            for (let other of this.boidsToConsider) {
                other.tempPosition = createVector(other.position.x, other.position.y);
            }
            this.findboidsToConsider(flock)
            let alignment = this.align(this.boidsToConsider);
            let cohesion = this.cohesion(this.boidsToConsider);
            let separation = this.separation(this.boidsToConsider);

            alignment.mult(alignSlider.value());
            cohesion.mult(cohesionSlider.value());
            separation.mult(separationSlider.value());

            this.maxForce = maxForceSlider.value();
            this.maxSpeed = maxSpeedSlider.value();
            this.perceptionRadius = perceptionRadiusSlider.value();

            this.acceleration.add(alignment);
            this.acceleration.add(cohesion);
            this.acceleration.add(separation);


        }

        update() {
            this.position.add(this.velocity);
            this.velocity.add(this.acceleration);
            this.velocity.limit(this.maxSpeed);

            this.acceleration.mult(0);
        }

        show() {
            strokeWeight(6);
            stroke(255);
            point(this.position.x, this.position.y);
        }
    }
</script>